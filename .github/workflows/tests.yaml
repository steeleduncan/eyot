name: CI
on:
  workflow_dispatch:
  push:

jobs:
  # unit tests running on "raw" machine
  host-tests:
    strategy:
      matrix:
        os:
        # intel mac
        - "macos-13"
        # aarch mac
        - "macos-15"
        # intel linuxes
        - "ubuntu-22.04" # this should be glibc older than debian 12
        - "ubuntu-24.04"
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - run: brew install go
        if: contains(matrix.os, 'macos')
      - run: sudo apt install oclgrind gcc ocl-icd-opencl-dev intel-opencl-icd golang -y
        if: contains(matrix.os, 'ubuntu')
      - name: Unit tests (no vgpu)
        run: source contrib/env.sh && eyot_test
      - name: Unit tests (oclgrind)
        if: contains(matrix.os, 'ubuntu')
        run: source contrib/env.sh && eyot_test
        env:
          EyotTestOclGrind: y

  # nix flake checks
  nix-tests:
    strategy:
      matrix:
        os:
          # intel mac
          - "macos-13"
          # aarch mac
          - "macos-15"
          # intel linux, no point on more than version as it is under nix
          - "ubuntu-latest"
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v4
      - uses: DeterminateSystems/nix-installer-action@main

      # unit tests
      - run: nix flake check -L
        name: Run all builds and tests

      # minimal hello world
      - run: echo "cpu fn main() { print_ln(true) }" > test.ey
        name: Create an example program

      # install and run the deb package (on linux)
      - run: nix build .#deb
        name: Build the debian package
        if: contains(matrix.os, 'ubuntu')

      - name: Upload .deb
        uses: actions/upload-artifact@v4
        with:
          name: deb
          path: ./result/eyot.deb
          overwrite: true
          retention-days: 1
      - run: sudo apt install --reinstall --yes ./result/eyot.deb
        name: Install debian package
        if: contains(matrix.os, 'ubuntu')
      - run: eyot run test.ey
        name: Run eyot via the debian package
        if: contains(matrix.os, 'ubuntu')

      # upload the gh pages artefact
      # NB it is built as part of tests, so it is quickest to do this here
      - name: Generate docs
        run: nix build .#docs
        if: contains(matrix.os, 'ubuntu')
      - name: Upload docs
        uses: actions/upload-pages-artifact@v3
        if: contains(matrix.os, 'ubuntu')
        with:
          path: result/

      # check running via nix ok
      - run: nix run . -- run test.ey
        name: Run eyot from the flake

      # run a command within the nix shell to ensure that is ok
      - run: nix develop -i -c "eyot" "run" "tests/helloworld.ey"
        name: Check the nix shell

  # experiment with oclgrind
  ocl-grind-expt:
    runs-on: ubuntu-22.04
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4

      # build and install deb via nix
      - uses: DeterminateSystems/nix-installer-action@main
      - run: nix build .#deb
        name: Build the debian package
      - run: sudo apt install --reinstall --yes ./result/eyot.deb
        name: Install debian package

      # build a binary
      - run: sudo apt install gcc ocl-icd-opencl-dev intel-opencl-icd clinfo oclgrind -y
      - name: Build binary
        run: eyot build tests/workers/gpu/gpu-threads.ey
      - name: Run without oclgrind
        run: ./out.exe
      - name: Run with oclgrind
        run: oclgrind ./out.exe

  deploy-site:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs:
    - nix-tests
    - host-tests
    if: always() # NB this also updates the .deb, so only do it on success
    permissions:
      pages: write
      id-token: write
    steps:
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
