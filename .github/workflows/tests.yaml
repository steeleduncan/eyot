name: Eyot Tests
on:
  workflow_dispatch:
  push:

jobs:
  # unit tests running on "raw" machine
  host-tests:
    strategy:
      matrix:
        os:
          # intel mac
          - "macos-13"
          # aarch mac
          - "macos-15"
          # intel linux
          - "ubuntu-24.04"
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - run: brew install go
        if: contains(matrix.os, 'macos')
      - run: sudo apt install gcc ocl-icd-opencl-dev intel-opencl-icd golang -y
        if: contains(matrix.os, 'ubuntu')
      - name: Unit tests
        run: source contrib/env.sh && eyot_test

  # nix flake checks
  nix-tests:
    strategy:
      matrix:
        os:
          # intel mac
          - "macos-13"
          # aarch mac
          - "macos-15"
          # intel linux
          - "ubuntu-24.04"
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v4
      - uses: DeterminateSystems/nix-installer-action@main

      # unit tests
      - run: nix flake check -L
        name: Run all builds and tests

      # minimal hello world
      - run: echo "cpu fn main() { print_ln(true) }" > test.ey
        name: Create an example program

      # install and run the deb package (on linux)
      - run: nix build .#deb
        name: Build the debian package
        if: contains(matrix.os, 'ubuntu')
      - run: sudo apt install --reinstall --yes ./result/eyot.deb
        name: Install debian package
        if: contains(matrix.os, 'ubuntu')
      - run: eyot run test.ey
        name: Run eyot via the debian package
        if: contains(matrix.os, 'ubuntu')

      # check running via nix ok
      - run: nix run . -- run test.ey
        name: Run eyot from the flake

      # run a command within the nix shell to ensure that is ok
      - run: nix develop -i -c "eyot" "run" "tests/helloworld.ey"
        name: Check the nix shell

    # Update github pages (NB this also updates the .deb, so only do it on success)
    build-site:
      runs-on: ubuntu-latest
      timeout-minutes: 10
      needs:
      - nix-tests
      - host-tests
      if: ${{ always() && contains(join(needs.*.result, ','), 'failure') }}
      steps:
      - uses: actions/checkout@v4
      - uses: DeterminateSystems/nix-installer-action@main
      - name: Generate docs
        run: nix build .#docs
      - name: Upload docs
        uses: actions/upload-pages-artifact@v3
        with:
          path: result/

  deploy-site:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build-site
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
